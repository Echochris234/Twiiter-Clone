{"ast":null,"code":"var _jsxFileName = \"/Users/polo/Desktop/DanielleStart/Twitter-Clone/client/src/_components/feed/Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPosts, deletePost, likePost, getAllPosts } from \"./../../_actions/getPosts\"; // import { useHistory } from \"react-router-dom\";\n// import { useDispatch } from \"react-redux\";\n// import { Button, Segment } from \"semantic-ui-react\";\n// import { Link } from \"react-router-dom\";\n// import { getPosts, deletePost, likePost } from \"../../_actions/getPosts\";\n// import { Item, Icon } from \"semantic-ui-react\";\n\nimport TweetBox from './Tweetbox.js';\nimport './Feed.css';\nimport Post from '../post/Post.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction Feed(props) {\n  _s();\n\n  console.log(props);\n  const dispatch = useDispatch(); //    const[post,setPost]=useState([]);\n\n  const posts = useSelector(state => state.handlePost) || [];\n  useEffect(() => {\n    dispatch(getAllPosts());\n  }, [localStorage.getItem(\"posts\"), dispatch]); // const posts = useSelector((state) => state.handlePost) || [];\n\n  console.log(posts); // setPost(localStorage.getItem(\"post\"));\n  // JSON.parse(user).data.result._id\n\n  if (posts.length !== 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed__header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: props.tabName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TweetBox, {\n        id: props.id,\n        token: props.token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), posts.map(tweet => {\n        return /*#__PURE__*/_jsxDEV(Post, {\n          tweet: tweet,\n          id: props.id,\n          token: props.token\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed__header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: props.tabName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TweetBox, {\n        id: props.id,\n        token: props.token\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(Feed, \"8kplcsuZVGHozVYrYcM7BxkOPSQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Feed;\nexport default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["/Users/polo/Desktop/DanielleStart/Twitter-Clone/client/src/_components/feed/Feed.js"],"names":["React","useState","useEffect","useDispatch","useSelector","getPosts","deletePost","likePost","getAllPosts","TweetBox","Post","axios","require","Feed","props","console","log","dispatch","posts","state","handlePost","localStorage","getItem","length","tabName","id","token","map","tweet"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,QAA/B,EAAwCC,WAAxC,QAA2D,2BAA3D,C,CACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAO,YAAP;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEjBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAMG,QAAQ,GAAGd,WAAW,EAA5B,CAHiB,CAKrB;;AAGI,QAAMe,KAAK,GAAGd,WAAW,CAAEe,KAAD,IAAWA,KAAK,CAACC,UAAlB,CAAX,IAA2C,EAAzD;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,QAAQ,CAACT,WAAW,EAAZ,CAAR;AACH,GAFQ,EAEN,CAACa,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,EAAgCL,QAAhC,CAFM,CAAT,CATiB,CAajB;;AAEDF,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ,EAfkB,CAkBjB;AAEA;;AAIJ,MAAGA,KAAK,CAACK,MAAN,KAAgB,CAAnB,EAAqB;AACT,wBAEI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI;AAAA,oBAAKT,KAAK,CAACU;AAAX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eASI,QAAC,QAAD;AAAU,QAAA,EAAE,EAAEV,KAAK,CAACW,EAApB;AAAwB,QAAA,KAAK,EAAEX,KAAK,CAACY;AAArC;AAAA;AAAA;AAAA;AAAA,cATJ,EAaIR,KAAK,CAACS,GAAN,CAAWC,KAAD,IAAS;AACnB,4BAAO,QAAC,IAAD;AAAM,UAAA,KAAK,EAAEA,KAAb;AAAoB,UAAA,EAAE,EAAEd,KAAK,CAACW,EAA9B;AAAkC,UAAA,KAAK,EAAEX,KAAK,CAACY;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAAP;AACC,OAFD,CAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AA8BC,GA/Bb,MA+BiB;AAEb,wBAEI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI;AAAA,oBAAKZ,KAAK,CAACU;AAAX;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eASI,QAAC,QAAD;AAAU,QAAA,EAAE,EAAEV,KAAK,CAACW,EAApB;AAAwB,QAAA,KAAK,EAAEX,KAAK,CAACY;AAArC;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AA+BS;AACZ;;GAzFQb,I;UAGYV,W,EAKHC,W;;;KARTS,I;AA8FT,eAAeA,IAAf","sourcesContent":["import React, { useState,useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getPosts, deletePost, likePost,getAllPosts } from \"./../../_actions/getPosts\";\n// import { useHistory } from \"react-router-dom\";\n// import { useDispatch } from \"react-redux\";\n// import { Button, Segment } from \"semantic-ui-react\";\n\n// import { Link } from \"react-router-dom\";\n// import { getPosts, deletePost, likePost } from \"../../_actions/getPosts\";\n// import { Item, Icon } from \"semantic-ui-react\";\n\nimport TweetBox from './Tweetbox.js'\nimport './Feed.css'\nimport Post from '../post/Post.js'\n\nconst axios = require('axios');\n\nfunction Feed(props) {\n    \n    console.log(props);\n    const dispatch = useDispatch();\n\n//    const[post,setPost]=useState([]);\n\n    \n    const posts = useSelector((state) => state.handlePost) ||[]\n    useEffect(() => {\n        dispatch(getAllPosts());\n    }, [localStorage.getItem(\"posts\"), dispatch]);\n\n    // const posts = useSelector((state) => state.handlePost) || [];\n    \n   console.log(posts);\n\n\n    // setPost(localStorage.getItem(\"post\"));\n   \n    // JSON.parse(user).data.result._id\n\n\n\nif(posts.length !==0){\n            return (\n                \n                <div className=\"feed\">\n                    {/* Header */}\n                    <div className=\"feed__header\">\n                        <h2>{props.tabName}</h2>\n                    </div>\n\n                \n                \n                    {/* TweetBox */}\n                    <TweetBox id={props.id} token={props.token}/>\n                \n                {\n\n                    posts.map((tweet)=>{\n                    return <Post tweet={tweet} id={props.id} token={props.token} />\n                    })\n                }       \n                    {/* <Post tweet={posts} id={props.id} token={props.token} /> */}\n\n                \n                    {/* <Post tabName={props.tabName} id={props.id} token={props.token}/> */}\n                \n                    \n                \n        \n                </div>\n                \n                );\n            }else{\n                \n    return (\n\n        <div className=\"feed\">\n            {/* Header */}\n            <div className=\"feed__header\">\n                <h2>{props.tabName}</h2>\n            </div>\n\n\n\n            {/* TweetBox */}\n            <TweetBox id={props.id} token={props.token} />\n\n            {/* {\n\n                posts.map((tweet) => {\n                    return <Post tweet={tweet} id={props.id} token={props.token} />\n                })\n            } */}\n            {/* <Post tweet={posts} id={props.id} token={props.token} /> */}\n\n\n            {/* <Post tabName={props.tabName} id={props.id} token={props.token}/> */}\n\n\n\n\n        </div>\n\n    );\n                \n            }\n}\n    \n\n\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}