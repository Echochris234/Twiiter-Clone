{"ast":null,"code":"var _jsxFileName = \"/Users/polo/Desktop/DanielleStart/Twitter-Clone/client/src/_components/post/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { getPosts, deletePost, likePost, getAllPosts } from \"./../../_actions/getPosts\";\nimport { addBookmark } from \"./../../_actions/bookmarks\";\nimport { getComments, comment } from \"./../../_actions/getComments\";\nimport Comments from \"./Comments.js\";\nimport { Link } from \"react-router-dom\";\nimport './Post.css';\nimport { Avatar } from \"@material-ui/core\";\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport { Button, Comment, Form } from \"semantic-ui-react\";\nimport ReactHtmlParser from 'react-html-parser';\nimport Autolinker from 'autolinker';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Post(props) {\n  _s();\n\n  console.log(props);\n  const id = props.id;\n  const token = props.token;\n  const [userPost, updateUser] = useState({\n    author: id,\n    postId: \"\",\n    comment: \"\"\n  });\n  const dispatch = useDispatch();\n  const history = useHistory();\n  let userData = localStorage.getItem(\"userInfo\");\n\n  const currId = JSON.parse(userData).result._id;\n\n  var autolinker = new Autolinker({\n    urls: {\n      schemeMatches: true,\n      wwwMatches: true,\n      tldMatches: true\n    },\n    email: true,\n    phone: true,\n    stripPrefix: true,\n    stripTrailingSlash: true,\n    newWindow: true,\n    truncate: {\n      length: 0,\n      location: 'end'\n    },\n    className: ''\n  });\n  useEffect(() => {\n    if (props.tabName === \"home\") {\n      dispatch(getAllPosts());\n    } else if (props.tabName === \"profile\") {\n      dispatch(getPosts(id));\n    }\n\n    ;\n  }, [id, dispatch]);\n  let Data = useSelector(state => state);\n  let posts = useSelector(state => state.handlePost.postData) || [];\n  console.log(Data); // console.log(Data);\n\n  let linkPost;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.length !== 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: posts.map(post => {\n        linkPost = autolinker.link(post.article);\n        console.log(post);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post__avatar\",\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              src: \"https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8cHJvZmlsZXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post__body\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"post__header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post__headerText\",\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [/*#__PURE__*/_jsxDEV(Link, {\n                    style: {\n                      textDecoration: 'none',\n                      color: '#50b7f5'\n                    },\n                    to: {\n                      pathname: `/profile/${post.author.name}`,\n                      state: {\n                        name: post.author.name,\n                        id: post.author._id,\n                        token: token\n                      }\n                    },\n                    children: post.author.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"post_headerSpecial\",\n                    children: [/*#__PURE__*/_jsxDEV(VerifiedUserIcon, {\n                      className: \"post_badge\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 124,\n                      columnNumber: 41\n                    }, this), \" @\", post.author.email]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post__headerDescription\",\n                id: \"articles\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: ReactHtmlParser(linkPost)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this), Data.handleComment.postComments !== null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(Comment.Group, {\n                  children: [Data.handleComment.postComments.map(comment => {\n                    if (comment.postId === post._id) {\n                      return /*#__PURE__*/_jsxDEV(Comment.Group, {\n                        children: /*#__PURE__*/_jsxDEV(Comment, {\n                          children: [/*#__PURE__*/_jsxDEV(Comment.Avatar, {\n                            as: \"a\",\n                            src: \"https://react.semantic-ui.com/images/avatar/small/joe.jpg\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 155,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(Comment.Content, {\n                            children: [/*#__PURE__*/_jsxDEV(Comment.Author, {\n                              children: \"Tom Lukic\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 157,\n                              columnNumber: 61\n                            }, this), /*#__PURE__*/_jsxDEV(Comment.Text, {\n                              children: \"This will be great for business reports. I will definitely download this.\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 158,\n                              columnNumber: 61\n                            }, this), /*#__PURE__*/_jsxDEV(Comment.Actions, {\n                              children: [/*#__PURE__*/_jsxDEV(Comment.Action, {\n                                children: \"Reply\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 163,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(Comment.Action, {\n                                children: \"Save\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 164,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(Comment.Action, {\n                                children: \"Hide\"\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 165,\n                                columnNumber: 65\n                              }, this), /*#__PURE__*/_jsxDEV(Comment.Action, {\n                                children: [/*#__PURE__*/_jsxDEV(Icon, {\n                                  name: \"expand\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 167,\n                                  columnNumber: 69\n                                }, this), \"Full-screen\"]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 166,\n                                columnNumber: 65\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 162,\n                              columnNumber: 61\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 156,\n                            columnNumber: 57\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 154,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 153,\n                        columnNumber: 49\n                      }, this) // <Comment>\n                      //     <Comment.Content>\n                      //         <Comment.Author as='a'>\n                      //             <Link style={{ textDecoration: 'none', color: '#50b7f5' }}\n                      //                 to={{\n                      //                     pathname: `/profile/${comment.author.name}`,\n                      //                     state: {\n                      //                         name: comment.author.name,\n                      //                         id: comment.author._id,\n                      //                         token: token,\n                      //                     },\n                      //                 }}\n                      //             >\n                      //                 {comment.author.name}\n                      //             </Link>\n                      //             <span className=\"post_headerSpecial\">\n                      //                 <VerifiedUserIcon className=\"post_badge\"/> @{comment.author.email}\n                      //             </span>\n                      //             {/* {comment.author.name} */}    \n                      //         </Comment.Author>\n                      //         <Comment.Text>{comment.comment}</Comment.Text>\n                      //     </Comment.Content>\n                      //     <br></br>\n                      // </Comment>\n                      ; // console.log(comment)\n                    }\n                  }), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(Form, {\n                      reply: true,\n                      onSubmit: e => {\n                        dispatch(comment(token, userPost)).then(() => {\n                          dispatch(getComments(post._id));\n                          updateUser({ ...userPost,\n                            postId: \"\",\n                            comment: \"\"\n                          });\n                          history.push(`/${props.tabName}`);\n                        });\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(Form.TextArea, {\n                        type: \"text\",\n                        value: userPost.comment,\n                        placeholder: \"Create a new Post!\",\n                        onChange: e => {\n                          updateUser({ ...userPost,\n                            postId: post._id,\n                            comment: e.target.value\n                          }); // console.log(e.target.value)\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 223,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Button, {\n                        content: \"Add Reply\",\n                        labelPosition: \"left\",\n                        icon: \"edit\",\n                        primary: true\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 233,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 209,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 208,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post__footer\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  onClick: e => {\n                    dispatch(getComments(post._id)); // console.log(Data.handleComment.postComments)\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(ChatBubbleOutlineIcon, {\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 41\n                  }, this), \"Comments: \", post.comments.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 35\n                }, this), post.author._id === currId ? /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: e => {\n                    dispatch(deletePost(post._id, token));\n                    history.push(`/${props.tabName}`);\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(DeleteOutlineIcon, {\n                    fontSize: \"small\",\n                    style: {\n                      color: \"black\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 41\n                  }, this), \" Delete\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 67\n                }, this) : /*#__PURE__*/_jsxDEV(Button, {\n                  disabled: \"true\",\n                  onClick: e => {\n                    dispatch(deletePost(post._id, token));\n                    history.push(`/${props.tabName}`);\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(DeleteOutlineIcon, {\n                    fontSize: \"small\",\n                    style: {\n                      color: \"black\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 41\n                  }, this), \" Delete\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: e => {\n                    dispatch(likePost(post._id, token));\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(FavoriteBorderIcon, {\n                    fontSize: \"small\",\n                    style: {\n                      color: \"red\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 41\n                  }, this), \" Likes:  \", post.likes.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: e => {\n                    dispatch(addBookmark(id, post, token));\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(BookmarkBorderIcon, {\n                    fontSize: \"small\",\n                    style: {\n                      color: \"blue\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 41\n                  }, this), \" Bookmark\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false)\n  }, void 0, false);\n}\n\n_s(Post, \"3fY2v8zB6ucg9h1YhwJnUliAJTg=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/polo/Desktop/DanielleStart/Twitter-Clone/client/src/_components/post/Post.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","getPosts","deletePost","likePost","getAllPosts","addBookmark","getComments","comment","Comments","Link","Avatar","VerifiedUserIcon","ChatBubbleOutlineIcon","FavoriteBorderIcon","DeleteOutlineIcon","BookmarkBorderIcon","Button","Comment","Form","ReactHtmlParser","Autolinker","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Post","props","console","log","id","token","userPost","updateUser","author","postId","dispatch","history","userData","localStorage","getItem","currId","JSON","parse","result","_id","autolinker","urls","schemeMatches","wwwMatches","tldMatches","email","phone","stripPrefix","stripTrailingSlash","newWindow","truncate","length","location","className","tabName","Data","state","posts","handlePost","postData","linkPost","map","post","link","article","textDecoration","color","pathname","name","handleComment","postComments","e","then","push","target","value","comments","likes"],"mappings":"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","sourcesContent":["import React, { useEffect,useState  } from 'react'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { getPosts, deletePost, likePost, getAllPosts } from \"./../../_actions/getPosts\";\nimport {addBookmark} from \"./../../_actions/bookmarks\";\nimport { getComments,comment } from \"./../../_actions/getComments\";\nimport Comments from \"./Comments.js\";\nimport { Link } from \"react-router-dom\";\nimport './Post.css'\nimport { Avatar} from \"@material-ui/core\"\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\n\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\n\nimport { Button,Comment,Form } from \"semantic-ui-react\";\nimport ReactHtmlParser from 'react-html-parser';\nimport Autolinker from 'autolinker';\n\n\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction Post(props) {\nconsole.log(props)\n    \n\n    const id= props.id;\n    const token =props.token;\n    const [userPost, updateUser] = useState({ author: id, postId:\"\", comment: \"\" });\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    let userData = localStorage.getItem(\"userInfo\");\n    const currId = JSON.parse(userData).result._id;\n    \n    var autolinker = new Autolinker({\n        urls: {\n            schemeMatches: true,\n            wwwMatches: true,\n            tldMatches: true\n        },\n        email: true,\n        phone: true,\n       \n\n        stripPrefix: true,\n        stripTrailingSlash: true,\n        newWindow: true,\n\n        truncate: {\n            length: 0,\n            location: 'end'\n        },\n\n        className: ''\n    });\n\n\n\n    useEffect (()=>{\n        if(props.tabName===\"home\"){\n            dispatch(getAllPosts());\n            \n        }else if(props.tabName===\"profile\"){\n           \n            dispatch(getPosts(id));\n            \n        }  \n        \n        ;\n    },[id,dispatch]);\n    \n    let Data = useSelector((state) => state);\n     let posts = useSelector((state) => state.handlePost.postData) || []\nconsole.log(Data);\n    \n// console.log(Data);\n    let linkPost;\n\n    return (\n\n    <>\n      {posts.length!==0?(\n          <>\n            {posts.map((post)=>{\n                linkPost=autolinker.link(post.article);\n                console.log(post)\n\n                return(\n\n                <div className=\"post\">\n                   <div className=\"post__avatar\">\n                        <Avatar src=\"https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8cHJvZmlsZXxlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\" />\n                    </div> \n                    <div className=\"post__body\">\n                        <div className=\"post__header\">\n                             \n                            <div className=\"post__headerText\">\n                                <h3>\n\n                                        <Link style={{ textDecoration: 'none', color:'#50b7f5'}}\n                                            \n                                            to={{\n                                                pathname: `/profile/${post.author.name}`,\n                                                state: {\n                                                    name: post.author.name,\n                                                    id: post.author._id,\n                                                    token: token,\n                                                },\n                                            }}\n                                        >\n                                            {post.author.name}\n                                        </Link>\n                                    <span className=\"post_headerSpecial\">\n                                        <VerifiedUserIcon className=\"post_badge\" /> @{post.author.email}\n                                    </span>\n                                </h3>\n\n                            </div>\n\n                                <div className=\"post__headerDescription\" id=\"articles\" >\n                                <p>\n          \n                                        {ReactHtmlParser(linkPost) }\n                                        \n                                </p>\n                                      \n                            </div>\n                    \n                                {Data.handleComment.postComments !== null ?\n                                <>\n                                        \n                                <Comment.Group>\n                                                                                \n                                      \n                                    \n                                        { Data.handleComment.postComments.map((comment => {\n\n                                        if (comment.postId === post._id) {\n                                           \n                                            return (\n\n\n                                                <Comment.Group>\n                                                    <Comment>\n                                                        <Comment.Avatar as='a' src='https://react.semantic-ui.com/images/avatar/small/joe.jpg' />\n                                                        <Comment.Content>\n                                                            <Comment.Author>Tom Lukic</Comment.Author>\n                                                            <Comment.Text>\n                                                                This will be great for business reports. I will definitely download\n                                                                this.\n                                                             </Comment.Text>\n                                                            <Comment.Actions>\n                                                                <Comment.Action>Reply</Comment.Action>\n                                                                <Comment.Action>Save</Comment.Action>\n                                                                <Comment.Action>Hide</Comment.Action>\n                                                                <Comment.Action>\n                                                                    <Icon name='expand' />\n            Full-screen\n                                                                 </Comment.Action>\n                                                            </Comment.Actions>\n                                                        </Comment.Content>\n                                                    </Comment>\n                                                </Comment.Group>\n\n\n                                                // <Comment>\n                                                //     <Comment.Content>\n                                                //         <Comment.Author as='a'>\n                                                //             <Link style={{ textDecoration: 'none', color: '#50b7f5' }}\n\n                                                //                 to={{\n                                                //                     pathname: `/profile/${comment.author.name}`,\n                                                //                     state: {\n                                                //                         name: comment.author.name,\n                                                //                         id: comment.author._id,\n                                                //                         token: token,\n                                                //                     },\n                                                //                 }}\n                                                //             >\n                                                //                 {comment.author.name}\n                                                //             </Link>\n                                                //             <span className=\"post_headerSpecial\">\n                                                //                 <VerifiedUserIcon className=\"post_badge\"/> @{comment.author.email}\n                                                //             </span>\n                                                //             {/* {comment.author.name} */}    \n                                                //         </Comment.Author>\n                                                //         <Comment.Text>{comment.comment}</Comment.Text>\n                                                //     </Comment.Content>\n                                                //     <br></br>\n                                                // </Comment>\n                                            );\n                                            // console.log(comment)\n                                        }\n                                    }))\n                                    }\n\n\n                                            <div>\n                                                <Form reply\n                                                    onSubmit={(e) => {\n\n                                                        dispatch(comment(token, userPost)).then(() => {\n                                                            dispatch(getComments(post._id))\n                                                            updateUser({ ...userPost, postId: \"\", comment: \"\" });\n                                                            history.push(`/${props.tabName}`)\n                                                        });\n\n\n\n\n                                                    }}\n                                                >\n                                                    <Form.TextArea\n                                                        type=\"text\"\n                                                        value={userPost.comment}\n                                                        placeholder=\"Create a new Post!\"\n                                                        onChange={(e) => {\n                                                            updateUser({ ...userPost, postId: post._id, comment: e.target.value });\n                                                            // console.log(e.target.value)\n                                                        }}\n\n                                                    />\n                                                    <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n                                                </Form>\n                                            </div>\n                                        \n\n                                </Comment.Group>\n\n                                </>\n                                    : <></>}\n\n\n                            <div className=\"post__footer\">\n                                \n                                    {/* <Button onClick={(e) => {\n                                        <Comments postId={post._id} id={id} token={token} />\n                                        dispatch(getComments(post._id)).then((comment)=>{\n                                            \n                                        })\n                                    {console.log(\"Hello\")}\n                                        <Comments postId={post._id} id={id} token={token} />\n                                     }}\n                                    >\n                                        <ChatBubbleOutlineIcon fontSize=\"small\" />Comments: \n                                        <ChatBubbleOutlineIcon fontSize=\"small\" />Comments: {post.comments.length}\n                                </Button>\n                                */}\n                                \n                                    {/* <Comments postId={post._id} id={id} token={token}/> */}\n                                  <Button onClick={((e)=>{\n                                      dispatch(getComments(post._id))\n\n                                       \n                                        \n                                        \n                                        // console.log(Data.handleComment.postComments)\n                                  })}>\n\n                                    \n                                    \n                                      \n                                        \n                                        <ChatBubbleOutlineIcon fontSize=\"small\" />Comments: {post.comments.length}\n                                  </Button>\n                                    \n\n                                    {post.author._id === currId ? <Button\n                                        onClick={(e) => {\n                                            dispatch(deletePost(post._id, token));\n                                            history.push(`/${props.tabName}`)\n                                        }}\n                                    >\n                                        <DeleteOutlineIcon fontSize=\"small\" style={{ color: \"black\" }}/> Delete\n                                </Button> : \n                        <Button disabled=\"true\"\n                                        onClick={(e) => {\n                                            dispatch(deletePost(post._id, token));\n                                            history.push(`/${props.tabName}`)\n                                        }}\n                                    >\n                                        <DeleteOutlineIcon fontSize=\"small\" style={{ color: \"black\" }} /> Delete\n                      </Button>}\n                                    \n                                \n                                \n                                <Button\n                                    onClick={(e) => {\n                                        dispatch(likePost(post._id, token));\n                                      \n                                    \n                                    }}\n                                >\n                                        <FavoriteBorderIcon fontSize=\"small\" style={{ color: \"red\" }} /> Likes:  {post.likes.length}\n                            </Button>\n\n                              \n\n                                    <Button\n                                        onClick={(e) => {\n                                            dispatch(addBookmark(id, post, token));\n                                        }}\n                                    >\n                                        <BookmarkBorderIcon fontSize=\"small\" style={{ color: \"blue\" }} /> Bookmark\n                                 </Button>\n                              \n                             \n\n                            </div>\n                        </div>\n\n\n                    </div>\n\n                </div>\n                );\n            })}\n    \n          </>\n          \n      ):\n      <>\n      \n      <></>\n\n      </>\n      \n      \n      }\n     </>\n    \n    \n    );\n\n   \n\n\n\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}