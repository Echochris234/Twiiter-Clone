{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.\n */\n\n\nvar URL_PREFIX_REGEX = /^(https?:\\/\\/)?(www\\.)?/i;\n/**\n * A regular expression used to remove the 'mailto:' from URLs.\n */\n\nvar MAILTO_PREFIX_REGEX = /^mailto:/;\n/**\n * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n */\n\nvar PROTOCOL_RELATIVE_REGEX = /^\\/\\//;\n/**\n * @class Autolinker.match.Url\n *\n * Represents a Url match found in an input string which should be Autolinked.\n */\n\nvar URLMatch = function () {\n  function URLMatch(url, protocolMailtoMatch, protocolUrlMatch, protocolRelativeMatch, position, disableUrlStripping) {\n    _classCallCheck(this, URLMatch);\n\n    this._url = url;\n    this._protocolMailtoMatch = protocolMailtoMatch;\n    this._protocolUrlMatch = protocolUrlMatch;\n    this._protocolRelativeMatch = protocolRelativeMatch;\n    this.position = position;\n    this.disableUrlStripping = disableUrlStripping;\n    /**\n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n\n    this.protocolPrepended = false;\n  }\n  /**\n   * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n   * match was missing a protocol.\n   *\n   * @return {String}\n   */\n\n\n  _createClass(URLMatch, [{\n    key: 'getUrl',\n    value: function getUrl() {\n      var url = this._url; // if the url string doesn't begin with a protocol, assume 'http://'\n\n      if (!this._protocolMailtoMatch && !this._protocolRelativeMatch && !this._protocolUrlMatch && !this.protocolPrepended) {\n        url = this._url = 'http://' + url;\n        this.protocolPrepended = true;\n      }\n\n      return url;\n    }\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'getAnchorHref',\n    value: function getAnchorHref() {\n      var url = this.getUrl();\n      return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n    }\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'getAnchorText',\n    value: function getAnchorText() {\n      var anchorText = this.getUrl();\n\n      if (this.disableUrlStripping) {\n        return anchorText;\n      }\n\n      if (this._protocolRelativeMatch) {\n        // Strip off any protocol-relative '//' from the anchor text\n        anchorText = this.stripProtocolRelativePrefix(anchorText);\n      }\n\n      if (this._protocolMailtoMatch) {\n        anchorText = this.stripMailtoPrefix(anchorText);\n      }\n\n      anchorText = this.stripUrlPrefix(anchorText); // remove URL prefix\n\n      anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n\n      return anchorText;\n    } // ---------------------------------------\n    // Utility Functionality\n\n    /**\n     * Strips the URL prefix (such as \"http://\" or \"https://\") from the given text.\n     *\n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   url prefix (such as stripping off \"http://\")\n     * @return {String} The `anchorText`, with the prefix stripped.\n     */\n\n  }, {\n    key: 'stripUrlPrefix',\n    value: function stripUrlPrefix(text) {\n      return text.replace(URL_PREFIX_REGEX, '');\n    }\n    /**\n     * Strips the \"mailto:\" from the anchor text.\n     *\n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   url prefix (such as stripping off \"mailto:\")\n     * @return {String} The `anchorText`, with the prefix stripped.\n     */\n\n  }, {\n    key: 'stripMailtoPrefix',\n    value: function stripMailtoPrefix(text) {\n      return text.replace(MAILTO_PREFIX_REGEX, '');\n    }\n    /**\n     * Strips any protocol-relative '//' from the anchor text.\n     *\n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   protocol-relative prefix (such as stripping off \"//\")\n     * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n     */\n\n  }, {\n    key: 'stripProtocolRelativePrefix',\n    value: function stripProtocolRelativePrefix(text) {\n      return text.replace(PROTOCOL_RELATIVE_REGEX, '');\n    }\n    /**\n     * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n     *\n     * @private\n     * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n     *   slash ('/') that may exist.\n     * @return {String} The `anchorText`, with the trailing slash removed.\n     */\n\n  }, {\n    key: 'removeTrailingSlash',\n    value: function removeTrailingSlash(anchorText) {\n      if (anchorText.charAt(anchorText.length - 1) === '/') {\n        anchorText = anchorText.slice(0, -1);\n      }\n\n      return anchorText;\n    }\n  }]);\n\n  return URLMatch;\n}();\n\nexports.default = URLMatch;","map":{"version":3,"sources":["/Users/polo/node_modules/react-autolink-text2/lib/url_match.js"],"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","URL_PREFIX_REGEX","MAILTO_PREFIX_REGEX","PROTOCOL_RELATIVE_REGEX","URLMatch","url","protocolMailtoMatch","protocolUrlMatch","protocolRelativeMatch","position","disableUrlStripping","_url","_protocolMailtoMatch","_protocolUrlMatch","_protocolRelativeMatch","protocolPrepended","getUrl","getAnchorHref","replace","getAnchorText","anchorText","stripProtocolRelativePrefix","stripMailtoPrefix","stripUrlPrefix","removeTrailingSlash","text","charAt","slice","default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.\n */\nvar URL_PREFIX_REGEX = /^(https?:\\/\\/)?(www\\.)?/i;\n\n/**\n * A regular expression used to remove the 'mailto:' from URLs.\n */\nvar MAILTO_PREFIX_REGEX = /^mailto:/;\n\n/**\n * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n */\nvar PROTOCOL_RELATIVE_REGEX = /^\\/\\//;\n\n/**\n * @class Autolinker.match.Url\n *\n * Represents a Url match found in an input string which should be Autolinked.\n */\n\nvar URLMatch = function () {\n  function URLMatch(url, protocolMailtoMatch, protocolUrlMatch, protocolRelativeMatch, position, disableUrlStripping) {\n    _classCallCheck(this, URLMatch);\n\n    this._url = url;\n    this._protocolMailtoMatch = protocolMailtoMatch;\n    this._protocolUrlMatch = protocolUrlMatch;\n    this._protocolRelativeMatch = protocolRelativeMatch;\n    this.position = position;\n    this.disableUrlStripping = disableUrlStripping;\n    /**\n     * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n     * {@link #url} did not have a protocol)\n     */\n    this.protocolPrepended = false;\n  }\n\n  /**\n   * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n   * match was missing a protocol.\n   *\n   * @return {String}\n   */\n\n\n  _createClass(URLMatch, [{\n    key: 'getUrl',\n    value: function getUrl() {\n      var url = this._url;\n\n      // if the url string doesn't begin with a protocol, assume 'http://'\n      if (!this._protocolMailtoMatch && !this._protocolRelativeMatch && !this._protocolUrlMatch && !this.protocolPrepended) {\n        url = this._url = 'http://' + url;\n\n        this.protocolPrepended = true;\n      }\n\n      return url;\n    }\n\n    /**\n     * Returns the anchor href that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'getAnchorHref',\n    value: function getAnchorHref() {\n      var url = this.getUrl();\n\n      return url.replace(/&amp;/g, '&'); // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html\n    }\n\n    /**\n     * Returns the anchor text that should be generated for the match.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'getAnchorText',\n    value: function getAnchorText() {\n      var anchorText = this.getUrl();\n\n      if (this.disableUrlStripping) {\n        return anchorText;\n      }\n\n      if (this._protocolRelativeMatch) {\n        // Strip off any protocol-relative '//' from the anchor text\n        anchorText = this.stripProtocolRelativePrefix(anchorText);\n      }\n\n      if (this._protocolMailtoMatch) {\n        anchorText = this.stripMailtoPrefix(anchorText);\n      }\n\n      anchorText = this.stripUrlPrefix(anchorText); // remove URL prefix\n      anchorText = this.removeTrailingSlash(anchorText); // remove trailing slash, if there is one\n\n      return anchorText;\n    }\n\n    // ---------------------------------------\n\n    // Utility Functionality\n\n    /**\n     * Strips the URL prefix (such as \"http://\" or \"https://\") from the given text.\n     *\n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   url prefix (such as stripping off \"http://\")\n     * @return {String} The `anchorText`, with the prefix stripped.\n     */\n\n  }, {\n    key: 'stripUrlPrefix',\n    value: function stripUrlPrefix(text) {\n      return text.replace(URL_PREFIX_REGEX, '');\n    }\n\n    /**\n     * Strips the \"mailto:\" from the anchor text.\n     *\n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   url prefix (such as stripping off \"mailto:\")\n     * @return {String} The `anchorText`, with the prefix stripped.\n     */\n\n  }, {\n    key: 'stripMailtoPrefix',\n    value: function stripMailtoPrefix(text) {\n      return text.replace(MAILTO_PREFIX_REGEX, '');\n    }\n\n    /**\n     * Strips any protocol-relative '//' from the anchor text.\n     *\n     * @private\n     * @param {String} text The text of the anchor that is being generated, for which to strip off the\n     *   protocol-relative prefix (such as stripping off \"//\")\n     * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n     */\n\n  }, {\n    key: 'stripProtocolRelativePrefix',\n    value: function stripProtocolRelativePrefix(text) {\n      return text.replace(PROTOCOL_RELATIVE_REGEX, '');\n    }\n\n    /**\n     * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n     *\n     * @private\n     * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n     *   slash ('/') that may exist.\n     * @return {String} The `anchorText`, with the trailing slash removed.\n     */\n\n  }, {\n    key: 'removeTrailingSlash',\n    value: function removeTrailingSlash(anchorText) {\n      if (anchorText.charAt(anchorText.length - 1) === '/') {\n        anchorText = anchorText.slice(0, -1);\n      }\n      return anchorText;\n    }\n  }]);\n\n  return URLMatch;\n}();\n\nexports.default = URLMatch;"]},"metadata":{},"sourceType":"script"}