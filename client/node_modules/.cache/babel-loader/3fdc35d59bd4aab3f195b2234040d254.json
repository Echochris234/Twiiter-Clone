{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidMatch = isValidMatch;\nvar uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]+:/;\nvar hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//;\nvar hasWordCharAfterProtocolRegex = /:[^\\s]*?[A-Za-z]/;\nvar invalidProtocolRelMatchRegex = /^[\\w]\\/\\//;\n/**\n * Determines if a given match found by the match parser is valid.\n * Will return `false` for:\n *\n * 1) URL matches which do not have at least have one period ('.') in the\n *    domain name (effectively skipping over matches like \"abc:def\").\n *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n * 2) URL matches which do not have at least one word character in the\n *    domain name (effectively skipping over matches like \"git:1.0\").\n * 3) A protocol-relative url match (a URL beginning with '//') whose\n *    previous character is a word character (effectively skipping over\n *    strings like \"abc//google.com\")\n *\n * Otherwise, returns `true`.\n *\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if the match given is valid and should be\n *   processed, or `false` if the match is invalid and/or should just not be\n *   processed.\n */\n\nfunction isValidMatch(urlMatch, protocolUrlMatch, protocolRelativeMatch) {\n  if (protocolUrlMatch && !isValidUriScheme(protocolUrlMatch) || urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n  urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) || // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n  isInvalidProtocolRelativeMatch(protocolRelativeMatch) // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n  ) {\n      return false;\n    }\n\n  return true;\n}\n/**\n * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n * `false` if the scheme is 'javascript:' or 'vbscript:'\n *\n * @private\n * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n */\n\n\nfunction isValidUriScheme(uriSchemeMatch) {\n  var uriScheme = uriSchemeMatch.match(uriSchemeRegex)[0].toLowerCase();\n  return uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n}\n/**\n * Determines if a URL match does not have either:\n *\n * a) a full protocol (i.e. 'http://'), or\n * b) at least one dot ('.') in the domain name (for a non-full-protocol\n *    match).\n *\n * Either situation is considered an invalid URL (ex: 'git:d' does not have\n * either the '://' part, or at least one dot in the domain name. If the\n * match was 'git:abc.com', we would consider this valid.)\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @return {Boolean} `true` if the URL match does not have a full protocol,\n *   or at least one dot ('.') in a non-full-protocol match.\n */\n\n\nfunction urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) {\n  return !!urlMatch && (!protocolUrlMatch || !hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n}\n/**\n * Determines if a URL match does not have at least one word character after\n * the protocol (i.e. in the domain name).\n *\n * At least one letter character must exist in the domain name after a\n * protocol match. Ex: skip over something like \"git:1.0\"\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n *   have a protocol in the URL string, in order to check for a word\n *   character after the protocol separator (':').\n * @return {Boolean} `true` if the URL match does not have at least one word\n *   character in it after the protocol, `false` otherwise.\n */\n\n\nfunction urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) {\n  if (urlMatch && protocolUrlMatch) {\n    return !hasWordCharAfterProtocolRegex.test(urlMatch);\n  } else {\n    return false;\n  }\n}\n/**\n * Determines if a protocol-relative match is an invalid one. This method\n * returns `true` if there is a `protocolRelativeMatch`, and that match\n * contains a word character before the '//' (i.e. it must contain\n * whitespace or nothing before the '//' in order to be considered valid).\n *\n * @private\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if it is an invalid protocol-relative match,\n *   `false` otherwise.\n */\n\n\nfunction isInvalidProtocolRelativeMatch(protocolRelativeMatch) {\n  return !!protocolRelativeMatch && invalidProtocolRelMatchRegex.test(protocolRelativeMatch);\n}","map":{"version":3,"sources":["/Users/polo/node_modules/react-autolink-text2/lib/match_validator.js"],"names":["Object","defineProperty","exports","value","isValidMatch","uriSchemeRegex","hasFullProtocolRegex","hasWordCharAfterProtocolRegex","invalidProtocolRelMatchRegex","urlMatch","protocolUrlMatch","protocolRelativeMatch","isValidUriScheme","urlMatchDoesNotHaveProtocolOrDot","urlMatchDoesNotHaveAtLeastOneWordChar","isInvalidProtocolRelativeMatch","uriSchemeMatch","uriScheme","match","toLowerCase","test","indexOf"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACA,IAAIC,cAAc,GAAG,2BAArB;AACA,IAAIC,oBAAoB,GAAG,+BAA3B;AACA,IAAIC,6BAA6B,GAAG,kBAApC;AACA,IAAIC,4BAA4B,GAAG,WAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASJ,YAAT,CAAsBK,QAAtB,EAAgCC,gBAAhC,EAAkDC,qBAAlD,EAAyE;AACvE,MAAID,gBAAgB,IAAI,CAACE,gBAAgB,CAACF,gBAAD,CAArC,IAA2DG,gCAAgC,CAACJ,QAAD,EAAWC,gBAAX,CAA3F,IAA2H;AAC/HI,EAAAA,qCAAqC,CAACL,QAAD,EAAWC,gBAAX,CADjC,IACiE;AACrEK,EAAAA,8BAA8B,CAACJ,qBAAD,CAF9B,CAEsD;AAFtD,IAGE;AACE,aAAO,KAAP;AACD;;AAEH,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BI,cAA1B,EAA0C;AACxC,MAAIC,SAAS,GAAGD,cAAc,CAACE,KAAf,CAAqBb,cAArB,EAAqC,CAArC,EAAwCc,WAAxC,EAAhB;AAEA,SAAOF,SAAS,KAAK,aAAd,IAA+BA,SAAS,KAAK,WAApD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASJ,gCAAT,CAA0CJ,QAA1C,EAAoDC,gBAApD,EAAsE;AACpE,SAAO,CAAC,CAACD,QAAF,KAAe,CAACC,gBAAD,IAAqB,CAACJ,oBAAoB,CAACc,IAArB,CAA0BV,gBAA1B,CAArC,KAAqFD,QAAQ,CAACY,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAAvH;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,qCAAT,CAA+CL,QAA/C,EAAyDC,gBAAzD,EAA2E;AACzE,MAAID,QAAQ,IAAIC,gBAAhB,EAAkC;AAChC,WAAO,CAACH,6BAA6B,CAACa,IAA9B,CAAmCX,QAAnC,CAAR;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,8BAAT,CAAwCJ,qBAAxC,EAA+D;AAC7D,SAAO,CAAC,CAACA,qBAAF,IAA2BH,4BAA4B,CAACY,IAA7B,CAAkCT,qBAAlC,CAAlC;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidMatch = isValidMatch;\nvar uriSchemeRegex = /^[A-Za-z][-.+A-Za-z0-9]+:/;\nvar hasFullProtocolRegex = /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//;\nvar hasWordCharAfterProtocolRegex = /:[^\\s]*?[A-Za-z]/;\nvar invalidProtocolRelMatchRegex = /^[\\w]\\/\\//;\n\n/**\n * Determines if a given match found by the match parser is valid.\n * Will return `false` for:\n *\n * 1) URL matches which do not have at least have one period ('.') in the\n *    domain name (effectively skipping over matches like \"abc:def\").\n *    However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n * 2) URL matches which do not have at least one word character in the\n *    domain name (effectively skipping over matches like \"git:1.0\").\n * 3) A protocol-relative url match (a URL beginning with '//') whose\n *    previous character is a word character (effectively skipping over\n *    strings like \"abc//google.com\")\n *\n * Otherwise, returns `true`.\n *\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if the match given is valid and should be\n *   processed, or `false` if the match is invalid and/or should just not be\n *   processed.\n */\nfunction isValidMatch(urlMatch, protocolUrlMatch, protocolRelativeMatch) {\n  if (protocolUrlMatch && !isValidUriScheme(protocolUrlMatch) || urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) || // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n  urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) || // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n  isInvalidProtocolRelativeMatch(protocolRelativeMatch) // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n  ) {\n      return false;\n    }\n\n  return true;\n}\n\n/**\n * Determines if the URI scheme is a valid scheme to be autolinked. Returns\n * `false` if the scheme is 'javascript:' or 'vbscript:'\n *\n * @private\n * @param {String} uriSchemeMatch The match URL string for a full URI scheme\n *   match. Ex: 'http://yahoo.com' or 'mailto:a@a.com'.\n * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n */\nfunction isValidUriScheme(uriSchemeMatch) {\n  var uriScheme = uriSchemeMatch.match(uriSchemeRegex)[0].toLowerCase();\n\n  return uriScheme !== 'javascript:' && uriScheme !== 'vbscript:';\n}\n\n/**\n * Determines if a URL match does not have either:\n *\n * a) a full protocol (i.e. 'http://'), or\n * b) at least one dot ('.') in the domain name (for a non-full-protocol\n *    match).\n *\n * Either situation is considered an invalid URL (ex: 'git:d' does not have\n * either the '://' part, or at least one dot in the domain name. If the\n * match was 'git:abc.com', we would consider this valid.)\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to match something like\n *   'http://localhost', where we won't double check that the domain name\n *   has at least one '.' in it.\n * @return {Boolean} `true` if the URL match does not have a full protocol,\n *   or at least one dot ('.') in a non-full-protocol match.\n */\nfunction urlMatchDoesNotHaveProtocolOrDot(urlMatch, protocolUrlMatch) {\n  return !!urlMatch && (!protocolUrlMatch || !hasFullProtocolRegex.test(protocolUrlMatch)) && urlMatch.indexOf('.') === -1;\n}\n\n/**\n * Determines if a URL match does not have at least one word character after\n * the protocol (i.e. in the domain name).\n *\n * At least one letter character must exist in the domain name after a\n * protocol match. Ex: skip over something like \"git:1.0\"\n *\n * @private\n * @param {String} urlMatch The matched URL, if there was one. Will be an\n *   empty string if the match is not a URL match.\n * @param {String} protocolUrlMatch The match URL string for a protocol\n *   match. Ex: 'http://yahoo.com'. This is used to know whether or not we\n *   have a protocol in the URL string, in order to check for a word\n *   character after the protocol separator (':').\n * @return {Boolean} `true` if the URL match does not have at least one word\n *   character in it after the protocol, `false` otherwise.\n */\nfunction urlMatchDoesNotHaveAtLeastOneWordChar(urlMatch, protocolUrlMatch) {\n  if (urlMatch && protocolUrlMatch) {\n    return !hasWordCharAfterProtocolRegex.test(urlMatch);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Determines if a protocol-relative match is an invalid one. This method\n * returns `true` if there is a `protocolRelativeMatch`, and that match\n * contains a word character before the '//' (i.e. it must contain\n * whitespace or nothing before the '//' in order to be considered valid).\n *\n * @private\n * @param {String} protocolRelativeMatch The protocol-relative string for a\n *   URL match (i.e. '//'), possibly with a preceding character (ex, a\n *   space, such as: ' //', or a letter, such as: 'a//'). The match is\n *   invalid if there is a word character preceding the '//'.\n * @return {Boolean} `true` if it is an invalid protocol-relative match,\n *   `false` otherwise.\n */\nfunction isInvalidProtocolRelativeMatch(protocolRelativeMatch) {\n  return !!protocolRelativeMatch && invalidProtocolRelMatchRegex.test(protocolRelativeMatch);\n}"]},"metadata":{},"sourceType":"script"}