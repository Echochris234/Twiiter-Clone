{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.default = function (text) {\n  var disableUrlStripping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var regex = new RegExp(urlRegex, 'gi');\n  var matches = [];\n  var match;\n\n  while ((match = regex.exec(text)) !== null) {\n    var _match = match,\n        _match2 = _slicedToArray(_match, 5),\n        matchedText = _match2[0],\n        protocolMailtoMatch = _match2[1],\n        protocolUrlMatch = _match2[2],\n        wwwProtocolRelativeMatch = _match2[3],\n        tldProtocolRelativeMatch = _match2[4];\n\n    var protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch; // If it's a protocol-relative '//' match, remove the character\n    // before the '//' (which the matcherRegex needed to match due to\n    // the lack of a negative look-behind in JavaScript regular\n    // expressions)\n\n    if (protocolRelativeMatch) {\n      var charBeforeMatch = protocolRelativeMatch.match(charBeforeProtocolRelMatchRegex)[1] || ''; // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n\n      if (charBeforeMatch) {\n        matchedText = matchedText.slice(1); // remove the prefixed char from the match\n\n        match.index++;\n      }\n    }\n\n    if ((0, _match_validator.isValidMatch)(matchedText, protocolUrlMatch, protocolRelativeMatch)) {\n      var position = {\n        start: match.index,\n        end: regex.lastIndex\n      };\n      matches.push(new _url_match2.default(matchedText, protocolMailtoMatch, protocolUrlMatch, protocolRelativeMatch, position, disableUrlStripping));\n    }\n  }\n\n  return matches;\n};\n\nvar _match_validator = require('./match_validator');\n\nvar _url_match = require('./url_match');\n\nvar _url_match2 = _interopRequireDefault(_url_match);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match\n// the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\").\n// Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a\n// protocol here (i.e. ignore a trailing port number in this regex)\n\n\nvar protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/; // starting with 'www.'\n\nvar wwwRegex = /(?:www\\.)/; // anything looking at all like a domain, non-unicode domains, not ending in a period\n\nvar domainNameRegex = /[A-Za-z0-9.-]*[A-Za-z0-9-]/; // anything looking like an email address\n\nvar mailboxRegex = /(?:(?:[^<>()\\\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@(?:(?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/; // match our known top level domains (TLDs)\n\nvar tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/; // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n// http://blog.codinghorror.com/the-problem-with-urls/\n\nvar urlSuffixRegex = /[-A-Za-z0-9+&@#/%=~_()|'$*[\\]?!:,.;]*[-A-Za-z0-9+&@#/%=~_()|'$*[\\]]/;\nvar charBeforeProtocolRelMatchRegex = /^(.)?\\/\\//;\n/* eslint-disable indent */\n\nvar urlRegex = ['(?:', // parens to cover match for protocol (optional), and domain\n'(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, mailboxRegex.source, ')', '|', '(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n'(.?//)?', // *** Capturing group $2 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\nwwwRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for known a TLD url (ex: google.com)\n'(.?//)?', // *** Capturing group $3 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\ndomainNameRegex.source, tldRegex.source, ')', ')', '(?:' + urlSuffixRegex.source + ')?'].join('');\n/* eslint-enable indent */","map":{"version":3,"sources":["/Users/polo/node_modules/react-autolink-text2/lib/match_parser.js"],"names":["Object","defineProperty","exports","value","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","TypeError","default","text","disableUrlStripping","arguments","regex","RegExp","urlRegex","matches","match","exec","_match","_match2","matchedText","protocolMailtoMatch","protocolUrlMatch","wwwProtocolRelativeMatch","tldProtocolRelativeMatch","protocolRelativeMatch","charBeforeMatch","charBeforeProtocolRelMatchRegex","slice","index","_match_validator","isValidMatch","position","start","end","lastIndex","_url_match2","require","_url_match","_interopRequireDefault","obj","__esModule","protocolRegex","wwwRegex","domainNameRegex","mailboxRegex","tldRegex","urlSuffixRegex","source","join"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = function (text) {\n  var disableUrlStripping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var regex = new RegExp(urlRegex, 'gi');\n  var matches = [];\n\n  var match;\n  while ((match = regex.exec(text)) !== null) {\n    var _match = match,\n        _match2 = _slicedToArray(_match, 5),\n        matchedText = _match2[0],\n        protocolMailtoMatch = _match2[1],\n        protocolUrlMatch = _match2[2],\n        wwwProtocolRelativeMatch = _match2[3],\n        tldProtocolRelativeMatch = _match2[4];\n\n    var protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch;\n\n    // If it's a protocol-relative '//' match, remove the character\n    // before the '//' (which the matcherRegex needed to match due to\n    // the lack of a negative look-behind in JavaScript regular\n    // expressions)\n    if (protocolRelativeMatch) {\n      var charBeforeMatch = protocolRelativeMatch.match(charBeforeProtocolRelMatchRegex)[1] || '';\n\n      // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n      if (charBeforeMatch) {\n        matchedText = matchedText.slice(1); // remove the prefixed char from the match\n        match.index++;\n      }\n    }\n\n    if ((0, _match_validator.isValidMatch)(matchedText, protocolUrlMatch, protocolRelativeMatch)) {\n      var position = { start: match.index, end: regex.lastIndex };\n      matches.push(new _url_match2.default(matchedText, protocolMailtoMatch, protocolUrlMatch, protocolRelativeMatch, position, disableUrlStripping));\n    }\n  }\n\n  return matches;\n};\n\nvar _match_validator = require('./match_validator');\n\nvar _url_match = require('./url_match');\n\nvar _url_match2 = _interopRequireDefault(_url_match);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// match protocol, allow in format \"http://\" or \"mailto:\". However, do not match\n// the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\").\n// Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a\n// protocol here (i.e. ignore a trailing port number in this regex)\nvar protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/;\n\n// starting with 'www.'\nvar wwwRegex = /(?:www\\.)/;\n\n// anything looking at all like a domain, non-unicode domains, not ending in a period\nvar domainNameRegex = /[A-Za-z0-9.-]*[A-Za-z0-9-]/;\n\n// anything looking like an email address\nvar mailboxRegex = /(?:(?:[^<>()\\\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@(?:(?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\n\n// match our known top level domains (TLDs)\nvar tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/;\n\n// Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n// http://blog.codinghorror.com/the-problem-with-urls/\nvar urlSuffixRegex = /[-A-Za-z0-9+&@#/%=~_()|'$*[\\]?!:,.;]*[-A-Za-z0-9+&@#/%=~_()|'$*[\\]]/;\n\nvar charBeforeProtocolRelMatchRegex = /^(.)?\\/\\//;\n\n/* eslint-disable indent */\nvar urlRegex = ['(?:', // parens to cover match for protocol (optional), and domain\n\n'(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, mailboxRegex.source, ')', '|', '(', // *** Capturing group $1, for a protocol-prefixed url (ex: http://google.com)\nprotocolRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n'(.?//)?', // *** Capturing group $2 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\nwwwRegex.source, domainNameRegex.source, ')', '|', '(?:', // non-capturing paren for known a TLD url (ex: google.com)\n'(.?//)?', // *** Capturing group $3 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\ndomainNameRegex.source, tldRegex.source, ')', ')', '(?:' + urlSuffixRegex.source + ')?'].join('');\n/* eslint-enable indent */"]},"metadata":{},"sourceType":"script"}